process.env.PHANTOMJS_BIN = './node_modules/phantomjs-prebuilt/bin/phantomjs'

const rollupPlugins = [
	require('rollup-plugin-json')(),
	require('rollup-plugin-node-resolve')({ jsnext: true, main: true }),
	require('rollup-plugin-buble')(),
]

if (process.env.COVERAGE) {
	rollupPlugins.push(require('rollup-plugin-istanbul')({
		exclude: [
			'src/index.js',
			'test/**',
			'**/node_modules/**',
		],
		instrumenterConfig: {
			embedSource: true,
		},
	}))
}

module.exports = function (karma) {
	karma.set({
		frameworks: ['mocha', 'sinon-chai'],

		preprocessors: {
			'src/**/*.js': ['rollup'],
			'test/**/*.spec.js': ['rollup'],
		},

		files: [
			{ pattern: 'src/**/*.js', included: false },
			'test/**/*.spec.js',
		],

		rollupPreprocessor: {
			plugins: rollupPlugins,
			sourceMap: 'inline',
			format: 'iife',
			moduleName: 'ScrollReveal',
		},

		colors: true,
		concurrency: 5,
		logLevel: karma.LOG_ERROR,
		singleRun: true,

		browserDisconnectTimeout: 60 * 1000,
		browserDisconnectTolerance: 1,
		browserNoActivityTimeout: 60 * 1000,
		// browserNoActivityTimeout: 60 * 1000 * 10 * 6, // dev tools debugging
		captureTimeout: 4 * 60 * 1000,
	})

	if (process.env.TRAVIS) {

		if (process.env.COVERAGE) {
			karma.set({
				autoWatch: false,
				browsers: ['PhantomJS'],
				coverageReporter: {
					type: 'lcovonly',
					dir: 'coverage/',
				},
				reporters: ['mocha', 'coverage', 'coveralls'],
			})

		} else {
			const customLaunchers = require('./sauce.conf')
			karma.set({
				autoWatch: false,
				browsers: Object.keys(customLaunchers),
				customLaunchers,
				reporters: ['dots', 'saucelabs'],
				sauceLabs: {
					testName: 'ScrollReveal',
					build: process.env.TRAVIS_BUILD_NUMBER || 'manual',
					tunnelIdentifier: process.env.TRAVIS_BUILD_NUMBER || 'autoGeneratedTunnelID',
					recordVideo: true,
					connectOptions: {
						'no-ssl-bump-domains': 'all', // because Android 4 has an SSL error?
					},
				},
			})
		}

	} else {
		karma.set({
			browsers: ['PhantomJS'],
			// browsers: ['Chrome'], // dev tools debugging
			coverageReporter: {
				type: 'lcov',
				dir: '.ignore/coverage/',
			},
			reporters: ['mocha', 'coverage'],
		})
	}
}
